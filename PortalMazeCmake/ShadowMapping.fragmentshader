#version 330 core

in vec4 vertex_position_cameraspace;
in vec4 vertex_normal_cameraspace;
in vec4 light_position_cameraspace;
in vec2 vertex_UV;
in vec4 vertex_position_lightspace;


uniform sampler2D shadowMapSampler;

uniform sampler2D diffuseColorSampler;
uniform sampler2D specularColorSampler;

uniform sampler2D Tex1Sampler; //portalTexture


uniform int useTexture = 0;
uniform int usePortalTexture = 0;


// light properties
struct Light {
    vec4 La;
    vec4 Ld;
    vec4 Ls;
    vec3 lightPosition_worldspace;
    float power;
};
uniform Light light;

// materials
struct Material {
    vec4 Ka;
    vec4 Kd;
    vec4 Ks;
    float Ns;
};
uniform Material mtl;

out vec4 fragmentColor;


void phong(float visibility, Light light);

float ShadowCalculation(sampler2D shadowMapSampler, vec4 fragPositionLightspace);


void main() {

    
    vec4 color1;
    vec4 color2;

    vec4 finalColor;
    if (usePortalTexture == 0)
    {


    float shadow  = ShadowCalculation(shadowMapSampler, vertex_position_lightspace);
    float visibility = 1.0f - shadow;
    phong(visibility, light);
    }
    else if (usePortalTexture == 1){
        vec2 uv = vec2(1.0-vertex_UV.x, vertex_UV.y);

        vec4 color = vec4(texture(diffuseColorSampler, uv).rgb, 1.0);
	    fragmentColor = color;

    }
}



float ShadowCalculation(sampler2D shadowMapSampler, vec4 fragPositionLightspace) {

    float shadow;
    // Perspective devide to bring coordinates in range[-1, 1]
    vec3 projCoords = fragPositionLightspace.xyz / fragPositionLightspace.w;

    // Since the depth map values are in range[0, 1]
    projCoords = 0.5 * projCoords + 0.5;

    float closestDepth = texture(shadowMapSampler, projCoords.xy).r;

    // Then we get the depth of the current vertex
    float currentDepth = projCoords.z;

    // If the currentDepth is larger than the closestDepth, the fragment is shadowed
    shadow = currentDepth > closestDepth ? 1.0 : 0.0;
    //*/

    // Correcting the quantization problem
    float bias = 0.005;
    shadow = currentDepth - bias > closestDepth ? 1.0 : 0.0;


    shadow = 0.0;
    vec2 depthMap_dimensions = textureSize(shadowMapSampler, 0);
    vec2 texelSize = 1.0 / depthMap_dimensions;
    for(int x = -1; x <= 1; x++ ){
        for(int y = -1; y <= 1; y++ ){
            float pcfDepth = texture(shadowMapSampler, projCoords.xy + vec2(x, y) * texelSize).r;
            shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
        }
    }
    shadow /= 9.0;
    //*/


    if(projCoords.z > 1)
        shadow = 0.0;
    //*/


    return shadow;

}


void phong(float visibility, Light light) {

    vec4 _Ks = mtl.Ks;
    vec4 _Kd = mtl.Kd;
    vec4 _Ka = mtl.Ka;
    float _Ns = mtl.Ns;

    // use texture for materials
    if (useTexture == 1) {
        _Ks = vec4(texture(specularColorSampler, vertex_UV).rgb, 1.0);
        _Kd = vec4(texture(diffuseColorSampler, vertex_UV).rgb, 1.0);
        _Ka = vec4(0.05 * _Kd.rgb, _Kd.a);
        _Ns = 10;
    }

     // model ambient intensity (Ia)
    vec4 Ia = light.La * _Ka;

        // model diffuse intensity (Id)
    vec4 N = normalize(vertex_normal_cameraspace);
    vec4 L = normalize(light_position_cameraspace - vertex_position_cameraspace);
    float cosTheta = clamp(dot(N, L), 0, 1);
    vec4 Id = light.Ld * _Kd * cosTheta;

        // model specular intensity (Is)
    vec4 R = reflect(-L, N);
    vec4 E = normalize(-vertex_position_cameraspace);
    float cosAlpha = clamp(dot(E, R), 0, 1);
    float specular_factor = pow(cosAlpha, _Ns);
    vec4 Is = light.Ls * _Ks * specular_factor;

        // final fragment color
    fragmentColor = vec4(
        (Ia + Id + Is) * visibility); // Apply visibility to all components
}

